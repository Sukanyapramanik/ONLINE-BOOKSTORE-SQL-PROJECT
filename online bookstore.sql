--ONLINE BOOKSTORE 

--CREATE TABLE

DROP TABLE IF EXISTS BOOKS;
CREATE TABLE BOOKS (
Book_ID SERIAL PRIMARY KEY,
Title VARCHAR(100),
Author VARCHAR(100),
Genre VARCHAR(100),
Published_Year INT,
Price NUMERIC(10,2),
Stock INT
);

DROP TABLE IF EXISTS CUSTOMERS;
CREATE TABLE CUSTOMERS (
Customer_ID SERIAL PRIMARY KEY,
Name VARCHAR(100),
Email VARCHAR(100),
Phone VARCHAR(15),
City VARCHAR(50),
Country VARCHAR(150)
);

DROP TABLE IF EXISTS ORDERS;
CREATE TABLE ORDERS (
Order_ID SERIAL PRIMARY KEY,
Customer_ID INT REFERENCES Customers (Customer_ID),
Book_ID INT REFERENCES Books (Book_ID),
Order_Date DATE,
Quantity INT,
Total_Amount NUMERIC(10,2)
);

SELECT * FROM BOOKS;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;

/* IMPORT DATA INTO BOOKS TABLE
COPY Books (Book_ID, Title, Author, Genre, Published_Year, Price, Stock)
FROM '_FILE LOCATION_'
CSV HEADER;

IMPORT DATA INTO CUSTOMERS TABLE
COPY Customers (Customer_ID, Name, Email, Phone, City, Country)
FROM '_FILE LOCATION_'
CSV HEADER;

IMPORT DATA INTO ORDERS TABLE
COPY Orders (Order_ID, Customer_ID, Book_ID, Order_Date, Quantity, Total_Amount)
FROM '_FILE LOCATION_'
CSV HEADER;

OR WE CAN DIRECTLY IMPORT CSV FILES FROM PostgreSQL 17 */

SELECT * FROM BOOKS;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;

--BASIC QUESTIONS

--1. RETRIEVE ALL BOOKS IN THE 'FICTION' GENRE
SELECT * FROM BOOKS
WHERE Genre = 'Fiction';

--2. FIND THE BOOK PUBLISHED AFTER THE YEAR 1950
SELECT * FROM BOOKS
WHERE published_year > 1950;

--3. LIST ALL CUSTOMERS FROM CANADA
SELECT * FROM CUSTOMERS
WHERE country = 'Canada';

--4. SHOW ORDERS PLACED IN NOVEMBER 2023
SELECT * FROM ORDERS
WHERE order_date BETWEEN '2023-11-01' AND '2023-11-30';

--5. RETRIEVE THE TOTAL STOCK OF BOOKS AVAILABLE
SELECT SUM(stock) AS total_stock 
FROM BOOKS;

--6. FIND THE DETAIL OF THE MOST EXPENSIVE BOOK
SELECT * FROM BOOKS
ORDER BY price DESC LIMIT 1;

--7. SHOW ALL CUSTOMERS WHO ORDERED MORE THAN 1 QUANTITY OF A BOOK
SELECT * FROM ORDERS
WHERE QUANTITY > 1;

--8. RETRIEVE ALL ORDERS WHERE THE TOTAL AMOUNT EXCEEDS $20
SELECT * FROM ORDERS
WHERE Total_amount > 20;

--9. LIST ALL GENRES AVAILABLE IN THE BOOKS TABLE
SELECT DISTINCT genre FROM BOOKS;

--10. FIND THE BOOK WITH THE LOWEST STOCK
SELECT * FROM BOOKS
ORDER BY Stock ASC LIMIT 1;

--11. CALCULATE THE TOTAL REVENUE GENERATED FROM ALL ORDERS
SELECT SUM(Total_amount ) AS total_revenue FROM ORDERS;


--ADVANCED QUESTIONS

--1. RETRIEVE THE TOTAL NO. OF BOOKS SOLD FROM EACH GENRE
SELECT b.genre, SUM(o.quantity) AS total_books_sold
FROM ORDERS o
JOIN BOOKS b
ON o.book_id=b.book_id
GROUP BY b.genre;

--2. FIND THE AVERAGE PRICE OF BOOKS IN THE 'FANTASY' GENRE
SELECT AVG(price) AS average_price
FROM BOOKS
WHERE genre = 'Fantasy';

--3. LIST ALL CUSTOMERS WHO HAVE PLACED AT LEAST 2 ORDERS
SELECT o.customer_id, c.name, COUNT(o.order_id) AS order_count
FROM ORDERS o
JOIN CUSTOMERS c
ON o.customer_id=c.customer_id
GROUP BY o.customer_id, c.name
HAVING COUNT(o.order_id) >= 2;

--4. FIND THE MOST FREQUENTLY ORDERED BOOK
SELECT book_id, COUNT(order_id) AS order_count
FROM ORDERS
GROUP BY book_id
ORDER BY order_count DESC LIMIT 1;

--IF WE WANT TO ADD BOOK NAME IN THE RESULT TABLE THEN WE HAVE TO USE JOINS
SELECT o.book_id, b.title, COUNT(o.order_id) AS order_count
FROM ORDERS o
JOIN BOOKS b
ON o.book_id=b.book_id
GROUP BY o.book_id, b.title
ORDER BY order_count DESC LIMIT 1;

--5. SHOWBOOKS b THE TOP 3 MOST EXPENSIVE BOOKS OF 'FANTASY' GENRE
SELECT * FROM BOOKS
WHERE genre = 'Fantasy'
ORDER BY price DESC LIMIT 1;

--6. RETRIEVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR
SELECT b.author, SUM(o.quantity) AS total_books_sold
FROM BOOKS b
JOIN ORDERS o
ON o.book_id=b.book_id
GROUP BY b.author;

--7. LIST THE CITIES WHERE CUSTOMERS WHO SPENT OVER $30 ARE LOCATED
SELECT DISTINCT c.city, o.total_amount
FROM ORDERS o
JOIN CUSTOMERS c
ON o.customer_id=c.customer_id
WHERE total_amount > 30;

--8. FIND THE CUSTOMER WHO SPENT THE MOST ON ORDERS
SELECT c.customer_id, c.name, SUM(o.total_amount) AS total_spent
FROM CUSTOMERS c
JOIN ORDERS o
ON c.customer_id=o.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_spent DESC LIMIT 3;

--9. CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS
SELECT b.book_id, b.title, b.stock, COALESCE (SUM(o.quantity),0) AS order_quantity,
b.stock - COALESCE(SUM(o.quantity),0) AS Remaining_quantity
FROM  BOOKS b
LEFT JOIN ORDERS o
ON o.book_id=b.book_id
GROUP BY b.book_id, b.title, b.stock
ORDER BY b.book_id;

